
using System;
using System.Collections.Generic;

namespace FoodDeliveryOrderManager
{
    class Program
    {
        static List<User> users = new List<User>();
        static List<Order> orders = new List<Order>();
        static List<MenuItem> menu = new List<MenuItem>
        {
            new MenuItem { Name = "Burger", Price = 5.99 },
            new MenuItem { Name = "Pizza", Price = 8.99 },
            new MenuItem { Name = "Pasta", Price = 7.49 },
            new MenuItem { Name = "Fries", Price = 2.99 }
        };

        static void Main(string[] args)
        {
            Console.WriteLine("Welcome to Food Delivery Order Manager!");

            SeedData();

            while (true)
            {
                ShowMainMenu();
            }
        }

        static void ShowMainMenu()
        {
            Console.Clear();
            Console.WriteLine("**********************************************************");
            Console.WriteLine("         Welcome to the Food Delivery Order Manager");
            Console.WriteLine("**********************************************************");
            Console.WriteLine("1. Register");
            Console.WriteLine("2. Login");
            Console.WriteLine("3. Exit");
            Console.WriteLine("**********************************************************");
            Console.Write("Please choose an option: ");
            int choice = int.Parse(Console.ReadLine());

            switch (choice)
            {
                case 1:
                    RegisterUser();
                    break;
                case 2:
                    LoginUser();
                    break;
                case 3:
                    Console.WriteLine("Exiting... Goodbye!");
                    Environment.Exit(0); // Exit the application
                    break;
                default:
                    Console.WriteLine("Invalid choice. Please try again.");
                    break;
            }
        }

        static void RegisterUser()
        {
            Console.Clear();
            Console.WriteLine("**********************************************************");
            Console.WriteLine("                    User Registration");
            Console.WriteLine("**********************************************************");
            Console.Write("Enter Username: ");
            string username = Console.ReadLine();
            Console.Write("Enter Password: ");
            string password = Console.ReadLine();
            Console.Write("Enter Gmail Address: ");
            string gmail = Console.ReadLine();
            Console.Write("Enter Role (Customer, Rider, Assembler): ");
            string role = Console.ReadLine();

            if (role != "Customer" && role != "Rider" && role != "Assembler")
            {
                Console.WriteLine("Invalid role. Registration failed.");
                return;
            }

            User user = new User
            {
                UserId = users.Count + 1,
                Username = username,
                Password = password,
                Gmail = gmail,
                Role = role
            };
            users.Add(user);
            Console.WriteLine("Registration successful!");
            Console.WriteLine("Press any key to go back to the main menu.");
            Console.ReadKey();
        }

        static void LoginUser()
        {
            Console.Clear();
            Console.WriteLine("**********************************************************");
            Console.WriteLine("                    User Login");
            Console.WriteLine("**********************************************************");
            Console.Write("Enter Username: ");
            string username = Console.ReadLine();
            Console.Write("Enter Password: ");
            string password = Console.ReadLine();

            User user = users.Find(u => u.Username == username && u.Password == password);
            if (user != null)
            {
                Console.WriteLine($"Login successful! Welcome, {user.Role} {user.Username} ({user.Gmail})");
                Console.WriteLine("Press any key to continue...");
                Console.ReadKey();
                switch (user.Role)
                {
                    case "Customer":
                        CustomerMenu(user);
                        break;
                    case "Rider":
                        RiderMenu(user);
                        break;
                    case "Assembler":
                        AssemblerMenu();
                        break;
                }
            }
            else
            {
                Console.WriteLine("Invalid credentials. Please try again.");
                Console.WriteLine("Press any key to try again.");
                Console.ReadKey();
            }
        }

        static void CustomerMenu(User customer)
        {
            while (true)
            {
                Console.Clear();
                Console.WriteLine("**********************************************************");
                Console.WriteLine("                    Customer Menu");
                Console.WriteLine("**********************************************************");
                Console.WriteLine("1. View Menu & Order");
                Console.WriteLine("2. View Your Orders");
                Console.WriteLine("3. Logout");
                Console.WriteLine("**********************************************************");
                Console.Write("Please choose an option: ");
                int choice = int.Parse(Console.ReadLine());

                switch (choice)
                {
                    case 1:
                        ViewMenuAndOrder(customer);
                        break;
                    case 2:
                        ViewCustomerOrders(customer);
                        break;
                    case 3:
                        return; // Logout and go back to main menu
                    default:
                        Console.WriteLine("Invalid choice. Please try again.");
                        break;
                }
            }
        }

        static void ViewMenuAndOrder(User customer)
        {
            Console.Clear();
            Console.WriteLine("**********************************************************");
            Console.WriteLine("                    Menu");
            Console.WriteLine("**********************************************************");
            for (int i = 0; i < menu.Count; i++)
            {
                Console.WriteLine($"{i + 1}. {menu[i].Name} - ₱{menu[i].Price:F2}");
            }

            List<MenuItem> orderItems = new List<MenuItem>(); // List to store items the customer wants to order

            while (true)
            {
                Console.Write("Choose an item to order (or type 0 to finish): ");
                int itemChoice = int.Parse(Console.ReadLine());

                if (itemChoice == 0) break;

                if (itemChoice < 1 || itemChoice > menu.Count)
                {
                    Console.WriteLine("Invalid choice. Please try again.");
                    continue;
                }

                MenuItem selectedItem = menu[itemChoice - 1];
                orderItems.Add(selectedItem);
                Console.WriteLine($"{selectedItem.Name} added to your order.");
            }

            double totalBill = 0;
            foreach (var item in orderItems)
            {
                Order newOrder = new Order
                {
                    OrderId = orders.Count + 1,
                    CustomerName = customer.Username,
                    MenuItem = item.Name,
                    Status = "Pending",
                    AssignedRiderId = -1,
                    Price = item.Price
                };
                totalBill += item.Price;
                orders.Add(newOrder);
                Console.WriteLine($"Order placed successfully! {item.Name} will be prepared.");
            }

            Console.WriteLine($"\nYour total bill is: ₱{totalBill:F2}");
            Console.WriteLine("Press any key to continue...");
            Console.ReadKey();
        }

        static void ViewCustomerOrders(User customer)
        {
            Console.Clear();
            Console.WriteLine("**********************************************************");
            Console.WriteLine("                    Your Orders");
            Console.WriteLine("**********************************************************");
            foreach (var order in orders)
            {
                if (order.CustomerName == customer.Username)
                {
                    Console.WriteLine($"Order ID: {order.OrderId}, Item: {order.MenuItem}, Status: {order.Status}, Price: ₱{order.Price:F2}");
                }
            }
            Console.WriteLine("Press any key to continue...");
            Console.ReadKey();
        }

        static void RiderMenu(User rider)
        {
            while (true)
            {
                Console.Clear();
                Console.WriteLine("**********************************************************");
                Console.WriteLine("                    Rider Menu");
                Console.WriteLine("**********************************************************");
                Console.WriteLine("1. View Assigned Orders");
                Console.WriteLine("2. Accept/Decline Order");
                Console.WriteLine("3. Logout");
                Console.WriteLine("**********************************************************");
                Console.Write("Please choose an option: ");
                int choice = int.Parse(Console.ReadLine());

                switch (choice)
                {
                    case 1:
                        ViewRiderOrders(rider);
                        break;
                    case 2:
                        AcceptOrDeclineOrder(rider);
                        break;
                    case 3:
                        return; // Logout and go back to main menu
                    default:
                        Console.WriteLine("Invalid choice. Please try again.");
                        break;
                }
            }
        }

        static void ViewRiderOrders(User rider)
        {
            Console.Clear();
            Console.WriteLine("**********************************************************");
            Console.WriteLine("                    Assigned Orders");
            Console.WriteLine("**********************************************************");
            foreach (var order in orders)
            {
                if (order.AssignedRiderId == rider.UserId)
                {
                    Console.WriteLine($"Order ID: {order.OrderId}, Item: {order.MenuItem}, Status: {order.Status}");
                }
            }
            Console.WriteLine("Press any key to continue...");
            Console.ReadKey();
        }

        static void AcceptOrDeclineOrder(User rider)
        {
            Console.Clear();
            Console.Write("Enter Order ID to accept/decline: ");
            int orderId = int.Parse(Console.ReadLine());
            Order order = orders.Find(o => o.OrderId == orderId && o.AssignedRiderId == rider.UserId);

            if (order != null)
            {
                Console.Write("Accept or Decline? (Type A for Accept, D for Decline): ");
                string decision = Console.ReadLine();
                if (decision == "A" || decision == "a")
                {
                    order.Status = "Accepted by Rider";
                    Console.WriteLine("Order accepted!");
                }
                else if (decision == "D" || decision == "d")
                {
                    order.Status = "Declined by Rider";
                    Console.WriteLine("Order declined.");
                }
                else
                {
                    Console.WriteLine("Invalid input.");
                }
            }
            else
            {
                Console.WriteLine("Order not found or not assigned to you.");
            }
            Console.WriteLine("Press any key to continue...");
            Console.ReadKey();
        }

        static void AssemblerMenu()
        {
            Console.Clear();
            Console.WriteLine("**********************************************************");
            Console.WriteLine("                    Assembler Menu");
            Console.WriteLine("**********************************************************");
            Console.WriteLine("1. Assign Rider to Order");
            Console.WriteLine("2. Update Order Status");
            Console.WriteLine("3. Update or Delete Order");
            Console.WriteLine("**********************************************************");
            Console.Write("Please choose an option: ");
            int choice = int.Parse(Console.ReadLine());

            switch (choice)
            {
                case 1:
                    AssignRiderToOrder();
                    break;
                case 2:
                    UpdateOrDeleteOrder();
                    break;
                default:
                    Console.WriteLine("Invalid choice.");
                    break;
            }
        }

        static void AssignRiderToOrder()
        {
            Console.Clear();
            Console.Write("Enter Order ID to assign: ");
            int orderId = int.Parse(Console.ReadLine());
            Order order = orders.Find(o => o.OrderId == orderId);

            if (order != null)
            {
                User rider = users.Find(u => u.Role == "Rider");
                if (rider != null)
                {
                    order.AssignedRiderId = rider.UserId;
                    order.Status = "Assigned to Rider";
                    Console.WriteLine($"Order {order.OrderId} assigned to Rider {rider.Username}.");
                }
                else
                {
                    Console.WriteLine("No available rider.");
                }
            }
            else
            {
                Console.WriteLine("Order not found.");
            }
            Console.WriteLine("Press any key to continue...");
            Console.ReadKey();
        }

        static void UpdateOrDeleteOrder()
        {
            Console.Clear();
            Console.Write("Enter Order ID to update or delete: ");
            int orderId = int.Parse(Console.ReadLine());
            Order order = orders.Find(o => o.OrderId == orderId);

            if (order != null)
            {
                Console.WriteLine($"Order ID: {order.OrderId}, Item: {order.MenuItem}, Status: {order.Status}");
                Console.Write("Do you want to (1) Update Status or (2) Delete Order? ");
                string choice = Console.ReadLine();

                if (choice == "1")
                {
                    UpdateOrderStatus(order);
                }
                else if (choice == "2")
                {
                    DeleteOrder(order);
                }
                else
                {
                    Console.WriteLine("Invalid choice.");
                }
            }
            else
            {
                Console.WriteLine("Order not found.");
            }
            Console.WriteLine("Press any key to continue...");
            Console.ReadKey();
        }

        static void UpdateOrderStatus(Order order)
        {
            Console.Clear();
            Console.Write("Enter new status (Prepared, Delivered): ");
            string status = Console.ReadLine();
            order.Status = status;
            Console.WriteLine("Order status updated.");
        }

        static void DeleteOrder(Order order)
        {
            orders.Remove(order);
            Console.WriteLine("Order deleted.");
        }

        static void SeedData()
        {
            users.Add(new User { UserId = 1, Username = "customer1", Password = "1234", Gmail = "customer1@gmail.com", Role = "Customer" });
            users.Add(new User { UserId = 2, Username = "rider1", Password = "1234", Gmail = "rider1@gmail.com", Role = "Rider" });
            users.Add(new User { UserId = 3, Username = "assembler1", Password = "1234", Gmail = "assembler1@gmail.com", Role = "Assembler" });
        }
    }

    public class User
    {
        public int UserId { get; set; }
        public string Username { get; set; }
        public string Password { get; set; }
        public string Gmail { get; set; }
        public string Role { get; set; }
    }

    public class Order
    {
        public int OrderId { get; set; }
        public string CustomerName { get; set; }
        public string MenuItem { get; set; }
        public string Status { get; set; }
        public int AssignedRiderId { get; set; }
        public double Price { get; set; }
    }

    public class MenuItem
    {
        public string Name { get; set; }
        public double Price { get; set; }
    }
}
